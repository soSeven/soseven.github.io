{"version":3,"file":"175-fb65b6aed7a6ca8f78fe.js","mappings":";;;;;;;;;;AAGA,GAAIA,CAAAA,CAAJ,CAIMC,CAAAA,CAAa,GAAIC,CAAAA,OAAJ,EAJnB,CAMMC,CAAAA,CACHC,SAAAA,CAAkBD,UAAlBC,EACAA,SAAAA,CAAkBC,aADlBD,EAEAA,SAAAA,CAAkBE,gBATrB,CASqBA,QAQLC,CAAAA,CARKD,CASnBE,CATmBF,CASnBE,CAKA,MAAM,wBAA0BE,CAAAA,MAA1B,EAODV,CAAAA,GACHA,CAAAA,CAAuB,GAAIW,CAAAA,oBAAJ,CACrB,YACEC,CAAAA,CAAQC,OAARD,CAAgB,kBACVE,CAAAA,CAAMC,cAAND,GAAMC,OAAAA,CAAAA,CAERd,CAAAA,CAAWe,GAAXf,CAAea,CAAAA,CAAMG,MAArBhB,CAFQc,GAEaE,CAAAA,EAFbF,CAIRd,CAAAA,CAAAA,MAAAA,CAAkBa,CAAAA,CAAMG,MAAxBhB,CAJEa,EAIsBG,CAL5BL,EAK4BK,CAPT,CAWrB,CACEC,UAAAA,CAAAA,QAAAA,MAvBiBf,CAuBjBe,CAvBiBf,IAAAA,EAuBjBe,CAvBiBf,CAAAA,CAAYM,aAuB7BS,GAvB6BT,MAwBCN,CAxBDM,EAwBCN,CAAAA,CAAYgB,QAD1CD,CAC0CC,QAD1CD,CAC0CC,QAF5C,CAXqB,CADpBnB,CAAAA,CAc2CmB,SAQ9CC,CAR8CD,CAQ9CC,CAQA,MANIA,CAAAA,CAAAA,CAAQC,OAARD,GAEFnB,CAAAA,CAAWqB,GAAXrB,CAAemB,CAAAA,CAAQC,OAAvBpB,CAAgCO,CAAhCP,EACAD,CAAAA,CAAqBuB,OAArBvB,CAA6BoB,CAAAA,CAAQC,OAArCrB,CAHEoB,EAGmCC,UAAAA,CAIjCrB,CAAAA,EAAwBoB,CAAAA,CAAQC,OAAhCrB,GACFC,CAAAA,CAAAA,MAAAA,CAAkBmB,CAAAA,CAAQC,OAA1BpB,EACAD,CAAAA,CAAqBwB,SAArBxB,CAA+BoB,CAAAA,CAAQC,OAAvCrB,CAFEA,EAEqCqB,CAH3C,CAG2CA,CAxCvC,EAwCuCA,UAAAA,CArCzC,MADAb,CAAAA,CAAAA,GAAAA,UAAAA,CAAAA,CACA,CADAA,CAFJ,CAEIA","sources":["webpack://gatsby-starter-default/../src/components/intersection-observer.ts"],"sourcesContent":["/* eslint-disable no-unused-expressions */\nimport { RefObject } from \"react\"\n\nlet intersectionObserver: IntersectionObserver\n\nexport type Unobserver = () => void\n\nconst ioEntryMap = new WeakMap<HTMLElement, () => void>()\n/* eslint-disable @typescript-eslint/no-explicit-any  */\nconst connection =\n  (navigator as any).connection ||\n  (navigator as any).mozConnection ||\n  (navigator as any).webkitConnection\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n// These match the thresholds used in Chrome's native lazy loading\n// @see https://web.dev/browser-level-image-lazy-loading/#distance-from-viewport-thresholds\nconst FAST_CONNECTION_THRESHOLD = `1250px`\nconst SLOW_CONNECTION_THRESHOLD = `2500px`\n\nexport function createIntersectionObserver(\n  callback: () => void\n): (element: RefObject<HTMLElement | undefined>) => Unobserver {\n  const connectionType = connection?.effectiveType\n\n  // if we don't support intersectionObserver we don't lazy load (Sorry IE 11).\n  if (!(`IntersectionObserver` in window)) {\n    return function observe(): Unobserver {\n      callback()\n      return function unobserve(): void {}\n    }\n  }\n\n  if (!intersectionObserver) {\n    intersectionObserver = new IntersectionObserver(\n      entries => {\n        entries.forEach(entry => {\n          if (entry.isIntersecting) {\n            // Get the matching entry's callback and call it\n            ioEntryMap.get(entry.target as HTMLElement)?.()\n            // We only need to call it once\n            ioEntryMap.delete(entry.target as HTMLElement)\n          }\n        })\n      },\n      {\n        rootMargin:\n          connectionType === `4g` && !connection?.saveData\n            ? FAST_CONNECTION_THRESHOLD\n            : SLOW_CONNECTION_THRESHOLD,\n      }\n    )\n  }\n\n  return function observe(\n    element: RefObject<HTMLElement | undefined>\n  ): Unobserver {\n    if (element.current) {\n      // Store a reference to the callback mapped to the element being watched\n      ioEntryMap.set(element.current, callback)\n      intersectionObserver.observe(element.current)\n    }\n\n    return function unobserve(): void {\n      if (intersectionObserver && element.current) {\n        ioEntryMap.delete(element.current)\n        intersectionObserver.unobserve(element.current)\n      }\n    }\n  }\n}\n"],"names":["intersectionObserver","ioEntryMap","WeakMap","connection","navigator","mozConnection","webkitConnection","createIntersectionObserver","callback","effectiveType","window","IntersectionObserver","entries","forEach","entry","isIntersecting","get","target","rootMargin","saveData","element","current","set","observe","unobserve"],"sourceRoot":""}